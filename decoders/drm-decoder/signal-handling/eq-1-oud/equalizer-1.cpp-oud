//#
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//%%                                                                         %
//%%  University of Kaiserslautern, Institute of Communications Engineering  %
//%%  Copyright (C) 2004 Andreas Dittrich                                    %
//%%                                                                         %
//%%  Author(s)    : Andreas Dittrich (dittrich@eit.uni-kl.de)               %
//%%  Project start: 27.05.2004                                              %
//%%  Last change: 02.05.2005, 11:30                                         %
//%%  Changes      : |                                                       %
//%%                                                                         %
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/*************************************************************************
*
*                           PA0MBO
*
*    COPYRIGHT (C)  2009  M.Bos 
*
*    This file is part of the distribution package RXAMADRM
*
*    This package is free software and you can redistribute is
*    and/or modify it under the terms of the GNU General Public License
*
*    More details can be found in the accompanying file COPYING
*************************************************************************/
/*
 *    Copyright (C) 2013
 *    Jan van Katwijk (J.vanKatwijk@gmail.com)
 *    Lazy Chair programming
 *
 *    This file is part of the SDR-J (JSDR).
 *    SDR-J is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *
 *    SDR-J is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with SDR-J; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *	The Wiener algorithm used in this implementation is written 
 *	in C++  and is a translation of the algorithm as given in
 *	diorama 1.1, (inspired by the translitteration as done for RXAMADRM) 
 */
#
#include	<QDebug>
#include	"referenceframe.h"
#include	"basics.h"
#include	"equalizer-1.h"
#include	"estimator-base.h"
#include	"estimator-1.h"
#include	"matrix2.h"

		equalizer_1::equalizer_1 (uint8_t Mode, uint8_t Spectrum):
	                                     equalizer_base (Mode, Spectrum) {
int16_t	i, window;
float	sigmaq_noise_list [] = {16.0, 14.0, 14.0, 12.0};
float	sigmaq_noise	= pow (10.0, - sigmaq_noise_list [Mode - Mode_A] / 10.0);
float	**PHI;
float	*THETA;
//	Based on table 92 ETSI ES 201980
//
int16_t		symbols_per_2D_window_list []	= {10, 6, 8, 6};
int16_t		symbols_to_delay_list []	= {5, 3, 4, 3};
int16_t		*currentTrainers;
//
//	first shorthands 
	symbols_per_2D_window	= symbols_per_2D_window_list [Mode - Mode_A];
	symbols_to_delay	= symbols_to_delay_list [Mode - Mode_A];
	periodforSymbols	= groupsperFrame (Mode);
	periodforPilots		= pilotDistance (Mode);
	windowsinFrame		= groupsperFrame (Mode);
	Ts			= Ts_of (Mode);
	Tu			= Tu_of (Mode);
	Tg			= Tg_of	(Mode);

	theTrainers		= new int16_t *[windowsinFrame];
	for (i = 0; i < windowsinFrame; i ++) 
	   theTrainers [i] = new int16_t [900];
	pilotEstimates		= new DSPCOMPLEX *[symbolsinFrame];
	for (i = 0; i < symbolsinFrame; i ++)
	   pilotEstimates [i] = new DSPCOMPLEX [carriersinSymbol];

//	precompute 2-D-Wiener filter-matrix w.r.t. power boost
//	Reference: Peter Hoeher, Stefan Kaiser, Patrick Robertson:
//	"Two-Dimensional Pilot-Symbol-Aided Channel Estimation By
//	Wiener Filtering",
//	ISIT 1997, Ulm, Germany, June 29 - July 4
//	PHI	= auto-covariance-matrix
//	THETA	= cross-covariance-vector
	f_cut_t = 0.0675 / windowsinFrame;
	f_cut_k = 1.75 * (float) Tg_of (Mode) / (float) Tu;
//
//	This code is based on the diorama Matlab code, and a
//	(complete)rewrite of the C translation of this Matlab code by Ties Bos.
//
//	first: create the vector of gain reference cells for the
//	whole frame(s) of this mode
//	Note that there is a periodicity such that the pilot structure
//	can be described in just a few "windows"
//	Now the handling: two loops, in the first one we create
//	"trainers" for the particular window
//	In the second one - a large loop - we build the filters
//	
//	We build up the "trainers" as relative addresses of the pilots
	for (window = 0; window < windowsinFrame; window ++) 
	   trainers_per_window [window] = 
	                  buildTrainers (window, theTrainers [window]);

	for (window = 0; window < windowsinFrame; window ++) {
	   int16_t	trainers_in_window	= trainers_per_window [window];
	   int16_t	*currentTrainers	= theTrainers [window];
	   int16_t	k_index1, k_index2, carrier;
//
	   W_symbol_blk [window]	= new double  *[carriersinSymbol];
	   for (i = 0; i < carriersinSymbol; i ++)
	      W_symbol_blk [window][i] = new double [trainers_in_window];

	   PHI		= new float *[trainers_in_window];
	   int cc;
	   for (cc = 0; cc < trainers_in_window; cc ++) {
	      PHI [cc] = new float [trainers_in_window];
	   }
	   THETA	= new float [trainers_in_window];
//
//	No need to set the PHI and THETA to zero, first access
//	is a normal assigment
//	Calculating PHI for the current "window"
//	Note that the symbol positions here are the positions
//	within the window (sym, car), sym relative
           for (k_index1 = 0;
                k_index1 < trainers_in_window; k_index1 ++) {
	      int16_t carrier_1_pos, symbol_1_pos;
	      getRelAddress (currentTrainers [k_index1], 
	                           &symbol_1_pos, &carrier_1_pos);
              for (k_index2 = 0;
                   k_index2 < trainers_in_window; k_index2 ++) {
	         int16_t symbol_2_pos, carrier_2_pos;
	         getRelAddress (currentTrainers [k_index2],
	                           &symbol_2_pos, &carrier_2_pos);
	         
                 PHI [k_index1][k_index2] = sinc ((carrier_1_pos -
	                                              carrier_2_pos) * f_cut_k)
	                                  * sinc ((symbol_1_pos -
	                                              symbol_2_pos) * f_cut_t);
              }
	   }	// end of k_index1 loop

//	add the noise to the diagonals
	   for (i = 0; i < trainers_in_window; i++) {
	      int16_t relSym, actualCarrier;
	      getRelAddress (currentTrainers [i], 
	                           &relSym, &actualCarrier);
	      DSPCOMPLEX v = getPilotValue (Mode, Spectrum,
	                                    relSym + window, actualCarrier);
	      float amp = real (v * conj (v));
	      PHI [i][i] += sigmaq_noise * 2.0 / amp;
	   }
	   inverse (PHI, trainers_in_window);
//
//	Note that from now on, PHI is actually PHI_INV. A "local"
//	implementation of inverse is used to avoid linking libraries
//	Now for Theta's
	   for (carrier = K_min; carrier <= K_max; carrier++) {
	      int16_t j, k;
	      if (carrier == 0)
	         continue;
	// first a new THETA
	      for (k_index2 = 0;
	           k_index2 < trainers_in_window; k_index2++) {
	         int16_t pilotSymbol, pilotCarrier;
	         getRelAddress (currentTrainers [k_index2],
	                        &pilotSymbol, &pilotCarrier);
	                        
//	THETA = cross covariance-vector
	         THETA [k_index2] = sinc ((carrier - pilotCarrier) * f_cut_k) *
	                            sinc ((symbols_to_delay - pilotSymbol) * f_cut_t);
	      }		// end of k_index2 loop

//      calc matrix product  W_symbol_blk [w] [car] = THETA * PHI_INV
//	in-line coded to avoid libraries
	      for (j = 0; j < trainers_in_window; j++) {
	         W_symbol_blk [window][indexFor (carrier)][j] = 0.0;
	         for (k = 0; k < trainers_in_window; k++)
	            W_symbol_blk [window][indexFor (carrier)][j] +=
	                          THETA [k] * PHI [k][j];
	      }
	   } /* end carrier-loop */
//
//	   done with the THETA and the PHI
	   delete [] THETA;
	   for (i = 0; i < trainers_in_window; i ++) {
	      delete [] PHI [i];
	   }
	   delete [] PHI;
	}			/* end www-loop  pa0mbo 26-5-2007 */
//
//	The "windows" are ready now
//
//	and finally, the estimators
	Estimators	= new estimatorBase *[symbolsinFrame];
	for (i = 0; i < symbolsinFrame; i ++)
	   Estimators [i] = new estimator_1 (refFrame, Mode, Spectrum, i);
}

		equalizer_1::~equalizer_1 (void) {
int16_t	i;
	for (i = 0; i < windowsinFrame; i ++) 
	   delete [] theTrainers [i];
	delete []	theTrainers;
	for (i = 0; i < symbolsinFrame; i ++)
	   delete [] pilotEstimates [i];
	delete [] pilotEstimates;
	for (i = 0; i < symbolsinFrame; i ++)
	   delete Estimators [i];
	delete [] Estimators;
}
//
//	The "trainers" are built over the "regular" pilots, i.e.
//	those pilots that appear in the regular pilot pattern.
//	"Trainers" are encoded as single offset relative
//	to the start of the window
int16_t		equalizer_1::buildTrainers (int16_t window, int16_t *v) {
int16_t symbol, carrier;
int16_t	myCount	= 0;

	for (symbol = window;
	     symbol < window + symbols_per_2D_window; symbol ++) {
	   for (carrier = K_min; carrier <= K_max; carrier ++) {
	      if (isPilotCell (Mode, symbol, carrier))
	         v [myCount ++] =
	               (carrier + (symbol - window) * carriersinSymbol);
	   }
	}
	return myCount;
}

//	The pilot indices are grouped and made relative to
//	the origin of the window they are in
void	equalizer_1::getRelAddress	(int16_t	pilotIndex,
	                                 int16_t	*sym,
	                                 int16_t	*carrier) {
int16_t	lPilot		= pilotIndex - K_min;   // lPilot 0 .. xxx
	*sym		= lPilot / carriersinSymbol;
	*carrier	= (lPilot % carriersinSymbol) + K_min;
}
//
bool	equalizer_1::equalize (DSPCOMPLEX *testRow, int16_t newSymbol,
	                       theSignal **outFrame,
	                       int16_t	*offset_integer,
	                       float	*offset_fractional,
	                       float	*delta_freq_offset,
	                       float	*sampleclockOffset) {
int16_t	carrier;
int16_t	symbol_to_process;
int16_t	i;

//	First, we copy the incoming vector to the appropriate vector
//	in the testFrame. Next we compute the estimates for the
//	channels of the pilots.
//	This is the most simple approach: the channels of the pilots
//	are obtained by dividing the value observed by the pilot value.
//
//	Tracking the freqency offset is done by looking at the
//	phase difference of frequency pilots in subsequent words
	DSPCOMPLEX	offs1	= DSPCOMPLEX (0, 0);
	DSPCOMPLEX	offs2	= DSPCOMPLEX (0, 0);
	float		offsa	= 0;
	int		offs3	= 0;
	int		offsb	= 0;
	DSPCOMPLEX	offs7	= DSPCOMPLEX (0, 0);
	
	for (carrier = K_min; carrier <= K_max; carrier ++) {
	   if (carrier == 0)
	      continue;
	   DSPCOMPLEX oldValue	= 
	                  testFrame [newSymbol][indexFor (carrier)];
	   testFrame [newSymbol][indexFor (carrier)] = 
	                  testRow [indexFor (carrier)];
//
//	apply formula 5.40 from the Tsai book to get the SCO
	   if (isPilotCell (Mode, newSymbol, carrier)) {
	      offsa	+= arg (oldValue * conj (testRow [indexFor (carrier)]))  / symbols_to_delay * indexFor (carrier);
	      offsb	+= indexFor (carrier) * indexFor (carrier); 
	   }
//
//	For an estimate of the residual frequency offset, we
//	look at the average phase difference in the
//	frequency pilots of the last N symbols
//
	   if (isFreqCell (Mode, newSymbol, carrier)) {
	      for (i = 1; i < symbolsinFrame; i ++) {
	         int16_t symIndex = (newSymbol + i + symbolsinFrame) %
	                                               symbolsinFrame;
	         offs1 += conj (testFrame [(symIndex - 1 + symbolsinFrame) %
	                                               symbolsinFrame]
	                                             [indexFor (carrier)]) *
	                   (testFrame [symIndex % symbolsinFrame]
	                                             [indexFor (carrier)]);
	      }
	   }

	   if (isPilotCell (Mode, newSymbol, carrier)) {
	      int16_t helpme = (newSymbol + periodforSymbols) % symbolsinFrame;
	      DSPCOMPLEX f1 = testFrame [newSymbol][indexFor (carrier)] *
	                   conj (getPilotValue (Mode, Spectrum, newSymbol, carrier));
	      DSPCOMPLEX f2 = testFrame [helpme][indexFor (carrier)] *
	                   conj (getPilotValue (Mode, Spectrum, helpme, carrier));
	      offs7 += f1 * conj (f2);
	   }
	}

//	For an estimate of the residual sample time offset (includes
//	the phase offset of the LO), we look at the average of the
//	phase offsets of the subsequent pilots in the current symbol
	DSPCOMPLEX prev_1 = DSPCOMPLEX (0, 0);
	DSPCOMPLEX prev_2 = DSPCOMPLEX (0, 0);
	for (carrier = K_min; carrier <= K_max; carrier ++) {
	   if (isPilotCell (Mode, newSymbol, carrier)) {
//	Formula 5.26 (page 99, Tsai et al), average phase offset
	      if (offs3 > 0) 
	         offs2 += (testRow [indexFor (carrier)] * 
	                      conj (getPilotValue (Mode, Spectrum, newSymbol, carrier))) *
	                   conj (prev_1 * conj (prev_2));
	         
	      offs3 += 1;
	      prev_1 = testRow [indexFor (carrier)];
	      prev_2 = getPilotValue (Mode, Spectrum, newSymbol, carrier);
	   }
	}
//
//	the SCO is then
//	 arg (offsa) / symbolsinFrame / (2 * M_PI * Ts / Tu * offsb)) * Ts;
//	The measured offset is in radials
	*sampleclockOffset = offsa / (2 * M_PI * (float (Ts) / Tu) * offsb);
//	still wondering about the scale
	*offset_integer		= 0;
	*offset_fractional	= arg (offs2) / (2 * M_PI * periodforPilots);
//	the frequency error we measure in radials
//	we may choose here between two ways of computing
//	offs1 means using the frequency pilots over N symbols
//	offs7 means using all pilots over two near symbols with the same
//	pilot layout
//	*delta_freq_offset	= arg (offs1);
	*delta_freq_offset	= arg (offs7) / periodforSymbols;
//	fprintf (stderr, "freq error: freq pilots = %f, all pilots  = %f\n",
//	                 arg (offs1), arg (offs7) / symbols_to_delay);
//
	Estimators [newSymbol] ->
	              estimate (testFrame [newSymbol],
	                        pilotEstimates [newSymbol]);

//	For equalizing symbol X, we need the pilotvalues
//	from the symbols X - symbols_to_delay .. X + symbols_to_delay - 1
//
//	We added the symbol at loc newSymbol, so we can equalize
//	the symbol "symbols_to_delay" back.
//	
	symbol_to_process = (newSymbol - symbols_to_delay + symbolsinFrame) %
	                                         symbolsinFrame;

	processSymbol (symbol_to_process, outFrame [symbol_to_process]);

//	If we have a frame full of output: return true
	return symbol_to_process == symbolsinFrame - 1;
}
//
//	This overloaded version is not used now
bool	equalizer_1::equalize (DSPCOMPLEX *testRow, int16_t newSymbol,
	                       theSignal **outFrame) {
int16_t	carrier;
int16_t	symbol_to_process;

//	First, we copy the incoming vector to the appropriate vector
//	in the testFrame. Next we compute the estimates for the
//	channels of the pilots.
//	This is the most simple approach: the channels of the pilots
//	are obtained by dividing the value observed by the pilot value.
	for (carrier = K_min; carrier <= K_max; carrier ++) {
	   if (carrier == 0)
	      continue;
	   testFrame [newSymbol][indexFor (carrier)] =
	                         testRow [indexFor (carrier)];
	   if (isPilotCell (Mode, newSymbol, carrier))
	      pilotEstimates [newSymbol][indexFor (carrier)] =
	                  testRow [indexFor (carrier)] /
	                    getPilotValue (Mode, Spectrum, newSymbol, carrier);
	}

//
//	For equalizing symbol X, we need the pilotvalues
//	from the symbols X - symbols_to_delay .. X + symbols_to_delay - 1
//
//	We added the symbol at loc newSymbol, so we can equalize
//	the symbol "symbols_to_delay - 1" back.
//	
	symbol_to_process = newSymbol - symbols_to_delay;
	if (symbol_to_process < 0)
	   symbol_to_process += symbolsinFrame;

	processSymbol (symbol_to_process, outFrame [symbol_to_process]);
//	If we have a frame full of output: return true
	return symbol_to_process == symbolsinFrame - 1;
}

//
//	process symbol "symbol", 
void	equalizer_1::processSymbol (int16_t symbol,
	                            theSignal *outVector) {
//	ntwee will indicate the "model" of the window, we deal with
//	while windowBase indicates the REAL window, i.e. the
//	the first symbol of the window as appearing in the frame.
int16_t	windowBase = (symbol - symbols_to_delay + 1 + symbolsinFrame) %
	                                       symbolsinFrame;
int16_t	ntwee			= windowBase % windowsinFrame;
int16_t	nrTrainers		= trainers_per_window [ntwee];
int16_t *currentTrainers	= theTrainers [ntwee];
int16_t	currentTrainer;
int16_t	carrier;

//	The trainers are over N subsequent symbols in the frame, starting
//	at windowBase. The "model" is to be found at ntwee.
//	we determine the REAL address in the frame by first computing the
//	relative address, and then adding the base of the window over
//	the frame we are looking at

//	As soon as we have the channel estimates for the pilots, we build
//	the actual filters. As usual, we build up the channels
//	in the refFrame

//
//	The outer loop refers to the targets for the
//	filtering,
//	the inner loop loops over the pilots (aka trainers) for
//	the reference window
	for (carrier = K_min; carrier <= K_max; carrier ++) {
	   double sum = 0;
	   if (carrier == 0)
	      continue;

	   refFrame [symbol] [indexFor (carrier)] = 0;
	   for (currentTrainer = 0;
	        currentTrainer < nrTrainers;  currentTrainer ++) {
	      int16_t relSym, pilotCarrier;
	      getRelAddress (currentTrainers [currentTrainer],
	                                        &relSym, &pilotCarrier);
	      int16_t actualSymbol = (relSym + windowBase) % symbolsinFrame;

	      refFrame [symbol] [indexFor (carrier)] +=
	           cmul (pilotEstimates [actualSymbol][indexFor (pilotCarrier)],
	                 W_symbol_blk [ntwee][indexFor (carrier)]
	                                                    [currentTrainer]);
	      sum += W_symbol_blk [ntwee][indexFor (carrier)][currentTrainer];
	   }
//	and normalize the value
	   refFrame [symbol][indexFor (carrier)] =
	                cdiv (refFrame [symbol][indexFor (carrier)], sum);
	}
//
//	The transfer function is now there, stored in the appropriate
//	entry in the refFrame, so let us equalize
	for (carrier = K_min; carrier <= K_max; carrier ++) {
	   DSPCOMPLEX temp	=
	                   refFrame [symbol] [indexFor (carrier)];
	   if (carrier == 0)
	      outVector [indexFor (0)]. signalValue = DSPCOMPLEX (0, 0);
	   else {
	      DSPCOMPLEX qq = testFrame [symbol][indexFor (carrier)] / temp;
	      outVector [indexFor (carrier)] . signalValue = qq;
	   }
	   outVector [indexFor (carrier)]. rTrans =
	             real (temp * conj (temp));
	}
}

